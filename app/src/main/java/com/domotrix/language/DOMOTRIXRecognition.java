/* DOMOTRIXRecognition.java */
/* Generated By:JavaCC: Do not edit this line. DOMOTRIXRecognition.java */
package com.domotrix.language;

/** Simple brace matcher. */
public class DOMOTRIXRecognition implements DOMOTRIXRecognitionConstants {

  /** to DOMOTRIXCommand */
  public static DOMOTRIXCommand toCommand(String strCommmand) throws ParseException, TokenMgrError {
    DOMOTRIXRecognition parser = new DOMOTRIXRecognition(new java.io.CharArrayReader(strCommmand.toCharArray()));
    DOMOTRIXCommand cmd = parser.Program();
    return cmd;
  }

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    try {
      DOMOTRIXRecognition parser = new DOMOTRIXRecognition(System.in);
      parser.Input();
    } catch (ParseException e) {
      System.out.println("Comando non riconosciuto.");
    } catch (TokenMgrError ee) {
      System.out.println("Comando non riconosciuto.");
    }
  }

/** Root production. */
  final public void Input() throws ParseException {
    Program();
    jj_consume_token(0);
  }

  final public DOMOTRIXCommand Program() throws ParseException {Token objCommand = null;
  Token objEnum = null;
  Token objWhat = null;
  Token objWhere = null;
  Token objWhen = null;
  Token objDecimal = null;
  Token objTimeUnit = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMAND:{
      objCommand = jj_consume_token(COMMAND);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENUM:{
        objEnum = jj_consume_token(ENUM);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      objWhat = jj_consume_token(WHAT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHERE:{
        objWhere = jj_consume_token(WHERE);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHEN:{
        objWhen = jj_consume_token(WHEN);
        objDecimal = jj_consume_token(DECIMAL_LITERAL);
        objTimeUnit = jj_consume_token(TIME);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(32);
//String speech = "";
    String cmd = objCommand.toString();
    String enm = (objEnum == null ? null : objEnum.toString());
    String what = objWhat.toString();
    String where = (objWhere == null ? null : objWhere.toString());
    String when = (objWhen == null ? null : objWhen.toString());
    String timeUnit = (objTimeUnit == null ? null : objTimeUnit.toString());
    boolean hasTimer = false;
    //String speech_when = "";

    DOMOTRIXCommand domotrixCmd = new DOMOTRIXCommand();

    // check WHEN
    if (when != null) {
      int decimal = Integer.parseInt(objDecimal.toString());
      if (timeUnit != null) {
        hasTimer = true;
        if (timeUnit.equalsIgnoreCase("SECONDI") || timeUnit.equalsIgnoreCase("SECONDO")) {
          domotrixCmd.setStart( decimal * 1000);
        } else if (timeUnit.equalsIgnoreCase("MINUTI") || timeUnit.equalsIgnoreCase("MINUTO")) {
          domotrixCmd.setStart( decimal * 60 * 1000);
        } else if (timeUnit.equalsIgnoreCase("ORE") || timeUnit.equalsIgnoreCase("ORA")) {
          domotrixCmd.setStart( decimal * 60 * 60 * 1000);
        }
        //speech_when = " tra "+decimal+" "+timeUnit;
      }
    }

    // check COMMAND
    if (cmd.equalsIgnoreCase("ACCENDI")) {
      domotrixCmd.setCommand(DOMOTRIXCommand.ON);
    } else if (cmd.equalsIgnoreCase("SPEGNI")) {
      domotrixCmd.setCommand(DOMOTRIXCommand.OFF);
    }

    // check QUANTITY
    if (enm != null) {
      if (enm.equalsIgnoreCase("SOLO")) {
        domotrixCmd.setQuantity(DOMOTRIXCommand.ONLY);
      } else {
        domotrixCmd.setQuantity(DOMOTRIXCommand.ALL);
      }
    } else {
      domotrixCmd.setQuantity(DOMOTRIXCommand.NONE);
    }

    // check WHAT
    if (what.equalsIgnoreCase("LUCE")) {
      domotrixCmd.setController(DOMOTRIXCommand.LIGHTS);
    } else if (what.equalsIgnoreCase("LUCI")) {
      domotrixCmd.setController(DOMOTRIXCommand.LIGHTS);
    }

    // check WHERE
    if (where != null) {
      domotrixCmd.setLocation(where);
    }

    //speech += speech_when;
    //domotrixCmd.setSpeech(speech);
    //System.out.println(speech);

    {if ("" != null) return domotrixCmd;}
      break;
      }
    case ENABLE:{
      objCommand = jj_consume_token(ENABLE);
      objWhat = jj_consume_token(STRING);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DECIMAL_LITERAL:{
        jj_consume_token(DECIMAL_LITERAL);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHEN:{
        objWhen = jj_consume_token(WHEN);
        objDecimal = jj_consume_token(DECIMAL_LITERAL);
        objTimeUnit = jj_consume_token(TIME);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(32);
System.out.println("Command "+objCommand.toString());
    System.out.println("What "+objWhat.toString());
    DOMOTRIXCommand domotrixCmd = new DOMOTRIXCommand();
    domotrixCmd.setCommand(DOMOTRIXCommand.MODE);
    domotrixCmd.setMode(objWhat.toString());
    //domotrixCmd.setSpeech("attivo "+objWhat.toString());
    {if ("" != null) return domotrixCmd;}
      break;
      }
    case SHOW:{
      objCommand = jj_consume_token(SHOW);
      objWhat = jj_consume_token(STRING);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DECIMAL_LITERAL:{
        jj_consume_token(DECIMAL_LITERAL);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHEN:{
        objWhen = jj_consume_token(WHEN);
        objDecimal = jj_consume_token(DECIMAL_LITERAL);
        objTimeUnit = jj_consume_token(TIME);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(32);
System.out.println("Command "+objCommand.toString());
    System.out.println("What "+objWhat.toString());
    DOMOTRIXCommand domotrixCmd = new DOMOTRIXCommand();
    domotrixCmd.setCommand(DOMOTRIXCommand.SHOW);
    domotrixCmd.setMode(objWhat.toString());
    //domotrixCmd.setSpeech("visualizzo "+objWhat.toString()+" sullo schermo principale.");
    {if ("" != null) return domotrixCmd;}
      break;
      }
    case DISABLE:{
      objCommand = jj_consume_token(DISABLE);
      objWhat = jj_consume_token(STRING);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DECIMAL_LITERAL:{
        jj_consume_token(DECIMAL_LITERAL);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHEN:{
        objWhen = jj_consume_token(WHEN);
        objDecimal = jj_consume_token(DECIMAL_LITERAL);
        objTimeUnit = jj_consume_token(TIME);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(32);
System.out.println("Command :"+objCommand.toString());
    System.out.println("What :"+objWhat.toString());
    DOMOTRIXCommand domotrixCmd = new DOMOTRIXCommand();
    domotrixCmd.setCommand(DOMOTRIXCommand.MODE);
    domotrixCmd.setMode(objWhat.toString());
    //domotrixCmd.setSpeech("disattivo "+objWhat.toString());
    {if ("" != null) return domotrixCmd;}
      break;
      }
    case GOOD_MORNING:{
      objCommand = jj_consume_token(GOOD_MORNING);
      jj_consume_token(32);
System.out.println("Command :"+objCommand.toString());
    DOMOTRIXCommand domotrixCmd = new DOMOTRIXCommand();
    domotrixCmd.setCommand(DOMOTRIXCommand.MODE);
    domotrixCmd.setMode("goodmorning");
    {if ("" != null) return domotrixCmd;}
      break;
      }
    case GOOD_NIGHT:{
      objCommand = jj_consume_token(GOOD_NIGHT);
      jj_consume_token(32);
System.out.println("Command :"+objCommand.toString());
    DOMOTRIXCommand domotrixCmd = new DOMOTRIXCommand();
    domotrixCmd.setCommand(DOMOTRIXCommand.MODE);
    domotrixCmd.setMode("goodnight");
    {if ("" != null) return domotrixCmd;}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public DOMOTRIXRecognitionTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800000,0x2000000,0x4000000,0x8000000,0x4000000,0x8000000,0x4000000,0x8000000,0x4000000,0x603c0000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public DOMOTRIXRecognition(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DOMOTRIXRecognition(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DOMOTRIXRecognitionTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public DOMOTRIXRecognition(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DOMOTRIXRecognitionTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public DOMOTRIXRecognition(DOMOTRIXRecognitionTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DOMOTRIXRecognitionTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[33];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
